// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/EtoNeJa00/GRPCService/internal/endpoints (interfaces: GrpcEnp)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	record "github.com/EtoNeJa00/GRPCService/internal/transport/grpc/generated/record"
	gomock "github.com/golang/mock/gomock"
)

// MockGrpcEnp is a mock of GrpcEnp interface.
type MockGrpcEnp struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcEnpMockRecorder
}

// MockGrpcEnpMockRecorder is the mock recorder for MockGrpcEnp.
type MockGrpcEnpMockRecorder struct {
	mock *MockGrpcEnp
}

// NewMockGrpcEnp creates a new mock instance.
func NewMockGrpcEnp(ctrl *gomock.Controller) *MockGrpcEnp {
	mock := &MockGrpcEnp{ctrl: ctrl}
	mock.recorder = &MockGrpcEnpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcEnp) EXPECT() *MockGrpcEnpMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockGrpcEnp) Delete(arg0 context.Context, arg1 *record.Id) (*record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*record.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGrpcEnpMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGrpcEnp)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockGrpcEnp) Get(arg0 context.Context, arg1 *record.Id) (*record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*record.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGrpcEnpMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGrpcEnp)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockGrpcEnp) Set(arg0 context.Context, arg1 *record.Record) (*record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(*record.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockGrpcEnpMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGrpcEnp)(nil).Set), arg0, arg1)
}
